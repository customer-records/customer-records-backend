require("dotenv").config();
process.env.TZ = "Europe/Moscow";

const express = require("express");
const { Client, LocalAuth } = require("whatsapp-web.js");
const qrcode = require("qrcode-terminal");
const { Pool } = require("pg");
const path = require("path");
const cors = require("cors");
const schedule = require("node-schedule");
const moment = require("moment-timezone");
const app = express();
app.use(express.json());
app.use(cors());

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL
const pool = new Pool({
  user: process.env.DB_USER,
  host: process.env.DB_HOST,
  database: process.env.DB_NAME,
  password: process.env.DB_PASSWORD,
  port: 5432,
});

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –∫–æ–¥–æ–≤ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
const codesStorage = new Map();

// –®–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π
const MESSAGE_TEMPLATES = [
  `üîê –í–∞—à –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: *{code}*\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É.\n‚ö†Ô∏è –ù–∏–∫–æ–º—É –Ω–µ —Å–æ–æ–±—â–∞–π—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥!`,
  `üõ°Ô∏è –ö–æ–¥ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: *{code}*\n\n–í–≤–µ–¥–∏—Ç–µ –µ–≥–æ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è.\n‚ùå –ù–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ –∫–æ–¥ —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º!`,
  `üîí –í–∞—à –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π –∫–æ–¥: *{code}*\n\n–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç.\nüö´ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é!`,
];

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WhatsApp –∫–ª–∏–µ–Ω—Ç–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å–µ—Å—Å–∏–∏
const whatsappClient = new Client({
  puppeteer: {
    executablePath:
      process.env.PUPPETEER_EXECUTABLE_PATH || "/usr/bin/chromium",
    args: [
      "--no-sandbox",
      "--disable-setuid-sandbox",
      "--disable-dev-shm-usage",
      "--disable-accelerated-2d-canvas",
      "--no-first-run",
      "--no-zygote",
      "--single-process",
      "--disable-gpu",
    ],
  },
  authStrategy: new LocalAuth({
    dataPath: path.join(__dirname, ".wwebjs_auth"),
  }),
  restartOnAuthFail: true,
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π WhatsApp
whatsappClient.on("qr", (qr) => {
  qrcode.generate(qr, { small: true });
  console.log("QR –∫–æ–¥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω, –æ—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ –µ–≥–æ —á–µ—Ä–µ–∑ WhatsApp");
});

whatsappClient.on("authenticated", () => {
  console.log("–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è WhatsApp —É—Å–ø–µ—à–Ω–∞!");
});

whatsappClient.on("auth_failure", (msg) => {
  console.error("–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:", msg);
});

whatsappClient.on("ready", () => {
  console.log("WhatsApp –∫–ª–∏–µ–Ω—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ");
});

whatsappClient.on("message", (message) => {
  console.log("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:", message.body);
});

whatsappClient.initialize().catch((err) => {
  console.error("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ WhatsApp:", err);
});

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏
const getRandomDelay = () => Math.floor(Math.random() * 15000) + 5000; // 5-20 —Å–µ–∫—É–Ω–¥

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
const getRandomTemplate = (code) => {
  const template =
    MESSAGE_TEMPLATES[Math.floor(Math.random() * MESSAGE_TEMPLATES.length)];
  return template.replace("{code}", code);
};

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ WhatsApp-—Å–æ–æ–±—â–µ–Ω–∏—è
async function sendWhatsAppMessage(phone, messageContent) {
  const cleanPhone = phone.replace(/\D/g, "");
  const whatsappNumber = `${cleanPhone}@c.us`;
  try {
    await whatsappClient.sendMessage(whatsappNumber, messageContent);
    console.log(
      `–°–æ–æ–±—â–µ–Ω–∏–µ "${messageContent}" –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –Ω–æ–º–µ—Ä ${cleanPhone}`
    );
  } catch (err) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ ${cleanPhone}:`, err);
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î –∏ WhatsApp –∫–ª–∏–µ–Ω—Ç–∞
app.get("/health", async (req, res) => {
  try {
    await pool.query("SELECT NOW()");
    res.json({
      status: "ok",
      whatsapp: whatsappClient.info ? "connected" : "disconnected",
      db: "connected",
    });
  } catch (error) {
    console.error("Database connection error:", error);
    res.status(500).json({
      status: "error",
      whatsapp: whatsappClient.info ? "connected" : "disconnected",
      db: "disconnected",
    });
  }
});

// –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ —á–µ—Ä–µ–∑ WhatsApp
app.post("/send-code/:phone_number", async (req, res) => {
  const { phone_number } = req.params;

  try {
    if (!whatsappClient.info) {
      return res.status(503).json({
        status: "error",
        message: "WhatsApp client not ready",
      });
    }
    const cleanPhone = phone_number.replace(/\D/g, "");
    const code = Math.floor(1000 + Math.random() * 9000).toString();
    codesStorage.set(cleanPhone, code);

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É
    const delay = getRandomDelay();
    console.log(`–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ —á–µ—Ä–µ–∑ ${delay / 1000} —Å–µ–∫—É–Ω–¥...`);

    setTimeout(async () => {
      try {
        const message = getRandomTemplate(code);
        await sendWhatsAppMessage(cleanPhone, message);
      } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:", err);
      }
    }, delay);

    res.json({
      status: "success",
      message: "Code will be sent via WhatsApp",
      phone: cleanPhone,
      code: code,
      delay_seconds: delay / 1000,
    });
  } catch (error) {
    console.error("Error:", error);
    res.status(500).json({
      status: "error",
      message: "Failed to process request",
    });
  }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞
app.get("/verify-code/:code", async (req, res) => {
  const { code } = req.params;

  try {
    // –ò—â–µ–º –∫–æ–¥ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    let foundPhone = null;
    let foundChatId = null;
    let foundUsername = null;

    for (const [phone, storedCode] of codesStorage.entries()) {
      if (storedCode === code) {
        foundPhone = phone;

        // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        try {
          const userResult = await pool.query(
            `SELECT chat_id, tg_name FROM clients 
             WHERE phone_number = $1 OR phone_number LIKE $2`,
            [foundPhone, `%${foundPhone.slice(-10)}%`]
          );

          if (userResult.rows.length > 0) {
            foundChatId = userResult.rows[0].chat_id || null;
            foundUsername = userResult.rows[0].tg_name || null;
          }
        } catch (dbError) {
          console.error("Database query error:", dbError);
        }

        break;
      }
    }

    if (foundPhone) {
      res.json({
        status: "success",
        phone: foundPhone,
        username: foundUsername,
        chat_id: foundChatId,
        code: code,
      });
    } else {
      res.status(404).json({
        status: "error",
        message: "Code not found or expired",
      });
    }
  } catch (error) {
    console.error("Error verifying code:", error);
    res.status(500).json({
      status: "error",
      message: "Internal server error",
    });
  }
});

// –û—á–∏—Å—Ç–∫–∞ –∫–æ–¥–∞
app.delete("/clear-code/:code", async (req, res) => {
  const { code } = req.params;

  try {
    let cleared = false;
    for (const [phone, storedCode] of codesStorage.entries()) {
      if (storedCode === code) {
        codesStorage.delete(phone);
        cleared = true;
        break;
      }
    }

    if (cleared) {
      res.json({ status: "success", message: "Code cleared" });
    } else {
      res.status(404).json({ status: "error", message: "Code not found" });
    }
  } catch (error) {
    console.error("Error clearing code:", error);
    res.status(500).json({ status: "error", message: "Failed to clear code" });
  }
});

// –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∑–∞–ø–∏—Å–∏
app.post("/send-notification", async (req, res) => {
  const {
    phone,
    client_name,
    appointment_date, // 'YYYY-MM-DD'
    appointment_time, // 'HH:MM'
    service_name,
    specialist_name,
  } = req.body;

  // –í–∞–ª–∏–¥–∞—Ü–∏—è
  if (!phone || !client_name || !appointment_date || !appointment_time) {
    return res.status(400).json({
      status: "error",
      message:
        "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å phone, client_name, appointment_date, appointment_time",
    });
  }
  if (!whatsappClient.info) {
    return res.status(503).json({
      status: "error",
      message: "WhatsApp client not ready",
    });
  }

  // –§–∞–±—Ä–∏–∫–∞ —Ç–µ–∫—Å—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  const buildMessage = () =>
    `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${client_name}!\n` +
    `–ù–∞–ø–æ–º–∏–Ω–∞–µ–º –æ –≤–∞—à–µ–π –∑–∞–ø–∏—Å–∏ –Ω–∞ —É—Å–ª—É–≥—É: *${service_name}*.\n` +
    `–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç: *${specialist_name}*.\n` +
    `–î–∞—Ç–∞: *${appointment_date}*, –≤—Ä–µ–º—è: *${appointment_time}*.\n` +
    `–ñ–¥—ë–º –≤–∞—Å! üòä`;

  // 1) –°—Ä–∞–∑—É –ø—Ä–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏
  await sendWhatsAppMessage(phone, buildMessage());

  // 2) –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É/–≤—Ä–µ–º—è –≤–∏–∑–∏—Ç–∞ –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É 08:00
  const visitMoment = moment
    .tz(
      `${appointment_date} ${appointment_time}`,
      "YYYY-MM-DD HH:mm",
      "Europe/Moscow"
    )
    .hour(8)
    .minute(0)
    .second(0);

  const now = moment.tz("Europe/Moscow");

  // –•–µ–ª–ø–µ—Ä –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
  function scheduleReminder(targetMoment, label) {
    if (targetMoment.isAfter(now)) {
      console.log(
        `–ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ "${label}" –Ω–∞ ${targetMoment.format()}`
      );
      schedule.scheduleJob(targetMoment.toDate(), async () => {
        console.log(`–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: ${label}`);
        await sendWhatsAppMessage(phone, buildMessage());
      });
    } else {
      console.log(
        `–ü—Ä–æ–ø—É—Å–∫–∞–µ–º "${label}", –≤—Ä–µ–º—è ${targetMoment.format()} —É–∂–µ –ø—Ä–æ—à–ª–æ`
      );
    }
  }

  // 3 –¥–Ω—è –¥–æ –≤–∏–∑–∏—Ç–∞
  scheduleReminder(
    visitMoment.clone().subtract(3, "days"),
    "–∑–∞ 3 –¥–Ω—è –¥–æ –≤–∏–∑–∏—Ç–∞"
  );

  // 1 –¥–µ–Ω—å –¥–æ –≤–∏–∑–∏—Ç–∞
  scheduleReminder(
    visitMoment.clone().subtract(1, "day"),
    "–∑–∞ 1 –¥–µ–Ω—å –¥–æ –≤–∏–∑–∏—Ç–∞"
  );

  // –í –¥–µ–Ω—å –≤–∏–∑–∏—Ç–∞ –≤ 08:00
  scheduleReminder(visitMoment, "–≤ –¥–µ–Ω—å –≤–∏–∑–∏—Ç–∞");

  res.json({ status: "success", message: "Notifications scheduled" });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 7001;
app.listen(PORT, () => {
  console.log(`WhatsApp Code Sender service running on port ${PORT}`);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ SIGINT
process.on("SIGINT", async () => {
  console.log("Shutting down...");
  try {
    await whatsappClient.destroy();
    await pool.end();
    console.log("Resources cleaned up");
  } catch (err) {
    console.error("Error during shutdown:", err);
  } finally {
    process.exit();
  }
});
