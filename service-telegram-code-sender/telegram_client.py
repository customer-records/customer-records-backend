from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart, Command
from aiogram.types import (
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove
)
import logging
import random
from typing import Dict, Tuple, Optional
from sqlalchemy.orm import sessionmaker
from sqlalchemy import create_engine, text
import os
from dotenv import load_dotenv

load_dotenv()

class TelegramBot:
    def __init__(self):
        self.TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
        self._validate_token()
        self.bot = Bot(token=self.TOKEN)
        self.dp = Dispatcher()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
        self.db_engine = create_engine(
            f"postgresql://{os.getenv('DB_USER')}:{os.getenv('DB_PASSWORD')}@"
            f"{os.getenv('DB_HOST')}/{os.getenv('DB_NAME')}"
        )
        self.Session = sessionmaker(bind=self.db_engine)
        
        # –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö: 
        # {user_id: {"code": str, "phone": str, "username": str, "chat_id": int}}
        self.user_data: Dict[int, Dict[str, str]] = {}
        self.phone_requests = set()
        self.logger = self._setup_logging()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self.dp.message(CommandStart())(self._handle_start)
        self.dp.message(lambda m: m.contact)(self._handle_phone)

    def _validate_token(self):
        if not self.TOKEN or len(self.TOKEN) < 30:
            raise ValueError("Invalid Telegram bot token")

    def _setup_logging(self):
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
        )
        return logging.getLogger(__name__)

    def _check_user_exists(self, tg_username: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î –ø–æ tg_name"""
        with self.Session() as session:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö users –∏ clients
            query = text("""
                SELECT EXISTS(
                    SELECT 1 FROM users WHERE tg_name = :username
                    UNION
                    SELECT 1 FROM clients WHERE tg_name = :username
                )
            """)
            result = session.execute(query, {"username": tg_username}).scalar()
            return bool(result)

    def store_user_data(self, chat_id: int, phone: str, username: str, code: str):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        self.user_data[chat_id] = {
            "code": code,
            "phone": phone,
            "username": username,
            "chat_id": chat_id
        }

    def get_user_info_by_code(self, code: str) -> Optional[Tuple[str, str, int]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–æ –∫–æ–¥—É"""
        for user_id, data in self.user_data.items():
            if data["code"] == code:
                return (data["phone"], data["username"], data["chat_id"])
        return None

    def clear_user_data_by_code(self, code: str) -> bool:
        """–û—á–∏—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∫–æ–¥—É"""
        for user_id, data in list(self.user_data.items()):
            if data["code"] == code:
                del self.user_data[user_id]
                return True
        return False

    def get_user_by_phone(self, phone: str) -> Optional[Dict[str, str]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
        for data in self.user_data.values():
            if data["phone"] == phone:
                return data
        return None

    def clear_user_data(self, chat_id: int) -> bool:
        """–û—á–∏—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ chat_id"""
        if chat_id in self.user_data:
            del self.user_data[chat_id]
            return True
        return False

    async def _handle_start(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        try:
            user_id = message.from_user.id
            tg_username = message.from_user.username
            
            if not tg_username:
                await message.answer(
                    "–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º —É –≤–∞—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω username –≤ Telegram. "
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
                )
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            if self._check_user_exists(tg_username):
                await message.answer(
                    "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. "
                    "–ö–æ–¥—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏."
                )
                return
                
            # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –ø—Ä–æ—Å–∏–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            self.logger.info(f"New user started: {tg_username}")
            await self._request_phone_number(message)

        except Exception as e:
            self.logger.error(f"Start handler error: {e}", exc_info=True)
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    async def _request_phone_number(self, message: types.Message):
        """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        request_contact = KeyboardButton(
            text="üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
            request_contact=True
        )
        keyboard = ReplyKeyboardMarkup(
            keyboard=[[request_contact]],
            resize_keyboard=True,
            one_time_keyboard=True
        )

        await message.answer(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–º –Ω—É–∂–µ–Ω –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
            reply_markup=keyboard
        )
        self.phone_requests.add(message.from_user.id)

    async def _handle_phone(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
        try:
            user_id = message.from_user.id
            if user_id not in self.phone_requests:
                return await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ /start")

            phone_number = message.contact.phone_number
            if not phone_number:
                raise ValueError("Phone number not provided")

            tg_username = message.from_user.username
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            code = str(random.randint(1000, 9999))
            self.store_user_data(
                chat_id=user_id,
                phone=phone_number,
                username=tg_username,
                code=code
            )
            
            await message.answer(
                f"‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à –Ω–æ–º–µ—Ä {phone_number} –ø—Ä–∏–Ω—è—Ç.\n\n"
                f"üîê –í–∞—à –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: <b>{code}</b>\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É.\n"
                "‚ö†Ô∏è –ù–∏–∫–æ–º—É –Ω–µ —Å–æ–æ–±—â–∞–π—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥!",
                parse_mode="HTML",
                reply_markup=ReplyKeyboardRemove()
            )

            self.phone_requests.discard(user_id)

        except Exception as e:
            self.logger.error(f"Phone handler error: {e}", exc_info=True)
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–º–µ—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ /start")

    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            self.logger.info("Starting bot...")
            bot_info = await self.bot.get_me()
            self.logger.info(f"Bot @{bot_info.username} ready!")
            await self.dp.start_polling(self.bot)
        except Exception as e:
            self.logger.critical(f"Bot failed to start: {e}", exc_info=True)
            raise
        finally:
            await self._shutdown()

    async def _shutdown(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã"""
        if hasattr(self, 'bot') and self.bot:
            await self.bot.session.close()
            self.db_engine.dispose()
            self.logger.info("Bot and DB connections closed")