from fastapi import FastAPI, HTTPException, Depends
from fastapi.middleware.cors import CORSMiddleware
from sqlalchemy import create_engine, text
from sqlalchemy.orm import sessionmaker
from sqlalchemy.exc import OperationalError
from dotenv import load_dotenv
from telegram_client import TelegramBot
import asyncio
import logging
import random
import os
from typing import Optional, Dict, Tuple

app = FastAPI()
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
DATABASE_URL = f"postgresql://{os.getenv('DB_USER')}:{os.getenv('DB_PASSWORD')}@{os.getenv('DB_HOST')}/{os.getenv('DB_NAME')}"
logger.info(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ URL: {DATABASE_URL}")
engine = create_engine(DATABASE_URL)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = TelegramBot()

@app.on_event("startup")
async def startup():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–µ—Ä–≤–∏—Å–∞"""
    asyncio.create_task(bot.start())
    logger.info("Service started")

@app.get("/health")
async def health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏"""
    return {"status": "ok", "bot": "running"}

@app.get("/verify-code/{code}")
async def verify_code(code: str):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, username –∏ chat_id –µ—Å–ª–∏ –∫–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω
    """
    result = bot.get_user_info_by_code(code)
    if not result:
        raise HTTPException(status_code=404, detail="Code not found or expired")
    
    phone, username, chat_id = result
    return {
        "status": "success",
        "phone": phone,
        "username": username,
        "chat_id": chat_id,
        "code": code
    }

@app.post("/clear-code/{code}")
async def clear_code(code: str):
    """
    –û—á–∏—Å—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–¥–∞ –∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É—Å–ø–µ—à–Ω—ã–π —Å—Ç–∞—Ç—É—Å, –µ—Å–ª–∏ –∫–æ–¥ –±—ã–ª –Ω–∞–π–¥–µ–Ω –∏ —É–¥–∞–ª–µ–Ω
    """
    if not bot.clear_user_data_by_code(code):
        raise HTTPException(status_code=404, detail="Code not found")
    
    return {
        "status": "success",
        "message": "Code and user data cleared"
    }

@app.post("/send_code/user/{phone_number}")
async def send_code_to_user(phone_number: str):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É (–∏–∑ —Ç–∞–±–ª–∏—Ü—ã Users)
    –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —á–µ—Ä–µ–∑ Telegram
    """
    try:
        db = SessionLocal()
        
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        clean_phone = ''.join(filter(str.isdigit, phone_number))
        
        # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º text()
        query = text("""
            SELECT chat_id, tg_name 
            FROM users 
            WHERE phone_number = :phone 
            OR phone_number LIKE :clean_phone
        """)
        
        # –ò—â–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        user = db.execute(
            query,
            {"phone": phone_number, "clean_phone": f"%{clean_phone[-10:]}"}
        ).fetchone()
        
        if not user or not user.chat_id:
            raise HTTPException(
                status_code=404,
                detail="user not found or has no linked Telegram account"
            )
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥
        code = str(random.randint(1000, 9999))
        bot.store_user_data(
            chat_id=user.chat_id,
            phone=clean_phone,
            username=user.tg_name,
            code=code
        )
        
        await bot.bot.send_message(
            chat_id=user.chat_id,
            text=f"üîê –í–∞—à –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: <b>{code}</b>\n\n"
                 "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É.\n"
                 "‚ö†Ô∏è –ù–∏–∫–æ–º—É –Ω–µ —Å–æ–æ–±—â–∞–π—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥!",
            parse_mode="HTML"
        )
        
        return {
            "status": "success",
            "message": "Code sent to user's Telegram",
            "phone": clean_phone,
            "username": user.tg_name,
            "chat_id": user.chat_id
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Failed to send code to user: {str(e)}", exc_info=True)
        raise HTTPException(
            status_code=500,
            detail="Internal server error while sending code"
        )
    finally:
        db.close()

@app.post("/send_code/client/{phone_number}")
async def send_code_to_client(phone_number: str):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É (–∏–∑ —Ç–∞–±–ª–∏—Ü—ã clients)
    –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —á–µ—Ä–µ–∑ Telegram
    """
    try:
        db = SessionLocal()
        
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        clean_phone = ''.join(filter(str.isdigit, phone_number))
        
        # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º text()
        query = text("""
            SELECT chat_id, tg_name 
            FROM clients 
            WHERE phone_number = :phone 
            OR phone_number LIKE :clean_phone
        """)
        
        # –ò—â–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        client = db.execute(
            query,
            {"phone": phone_number, "clean_phone": f"%{clean_phone[-10:]}"}
        ).fetchone()
        
        if not client or not client.chat_id:
            raise HTTPException(
                status_code=404,
                detail="Client not found or has no linked Telegram account"
            )
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥
        code = str(random.randint(1000, 9999))
        bot.store_user_data(
            chat_id=client.chat_id,
            phone=clean_phone,
            username=client.tg_name,
            code=code
        )
        
        await bot.bot.send_message(
            chat_id=client.chat_id,
            text=f"üîê –í–∞—à –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: <b>{code}</b>\n\n"
                 "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É.\n"
                 "‚ö†Ô∏è –ù–∏–∫–æ–º—É –Ω–µ —Å–æ–æ–±—â–∞–π—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥!",
            parse_mode="HTML"
        )
        
        return {
            "status": "success",
            "message": "Code sent to client's Telegram",
            "phone": clean_phone,
            "username": client.tg_name,
            "chat_id": client.chat_id
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Failed to send code to client: {str(e)}", exc_info=True)
        raise HTTPException(
            status_code=500,
            detail="Internal server error while sending code"
        )
    finally:
        db.close()