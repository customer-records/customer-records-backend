import os
import logging
import asyncio
from fastapi import FastAPI
from telegram import Bot, MessageEntity
from telegram.error import TelegramError, Conflict
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.events import (
    EVENT_JOB_ADDED,
    EVENT_JOB_EXECUTED,
    EVENT_JOB_ERROR,
)
from datetime import datetime
from zoneinfo import ZoneInfo
from dotenv import load_dotenv

# 1) –ó–∞–≥—Ä—É–∑–∫–∞ .env
load_dotenv()
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN_GROUP")
if not BOT_TOKEN:
    raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω TELEGRAM_BOT_TOKEN_GROUP –≤ .env")

# 2) –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# 3) –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ FastAPI
bot = Bot(token=BOT_TOKEN)
app = FastAPI()
scheduler = AsyncIOScheduler(timezone="Europe/Moscow")
TARGET_CHAT_ID = None

async def mention_listener():
    """
    –§–æ–Ω–æ–≤—ã–π polling: –ª–æ–≤–∏–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ @botusername, –æ–ø—Ä–µ–¥–µ–ª—è–µ–º chat_id –∏ —à–ª–µ–º –ø—Ä–∏–≤–µ—Ç.
    """
    global TARGET_CHAT_ID
    offset = None
    me = await bot.get_me()
    username = me.username.lower()

    while TARGET_CHAT_ID is None:
        try:
            updates = await bot.get_updates(
                offset=offset, timeout=5, allowed_updates=["message"]
            )
            for upd in updates:
                offset = upd.update_id + 1
                msg = upd.message
                if not msg or not msg.entities:
                    continue
                for ent in msg.entities:
                    if ent.type == MessageEntity.MENTION:
                        mention = msg.parse_entity(ent).lstrip("@").lower()
                        if mention == username:
                            TARGET_CHAT_ID = msg.chat.id
                            logger.info("–û–ø—Ä–µ–¥–µ–ª—ë–Ω chat_id —á–µ—Ä–µ–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ: %s", TARGET_CHAT_ID)
                            # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                            await bot.send_message(
                                chat_id=TARGET_CHAT_ID,
                                text=(
                                    "–ü—Ä–∏–≤–µ—Ç! –°–ø–∞—Å–∏–±–æ –∑–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ. "
                                    "–Ø –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –≤–∞–º –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 18:00 –ú–°–ö."
                                )
                            )
                            logger.info("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ %s", TARGET_CHAT_ID)
                            break
            if offset is not None:
                await bot.get_updates(offset=offset)
        except Conflict:
            logger.warning("Conflict polling ‚Äî –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É")
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ –≤ mention_listener: %s", e)
        await asyncio.sleep(1)

async def send_daily_message():
    """
    –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ 18:00 –ú–°–ö –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–Ω—è –Ω–µ–¥–µ–ª–∏.
    """
    global TARGET_CHAT_ID
    now = datetime.now(ZoneInfo("Europe/Moscow"))
    logger.info("send_daily_message –∑–∞–ø—É—â–µ–Ω –≤ %s", now.strftime("%Y-%m-%d %H:%M:%S %Z"))
    if not TARGET_CHAT_ID:
        logger.warning("chat_id –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω ‚Äî —Ä–∞—Å—Å—ã–ª–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞")
        return

    weekday = now.weekday()  # 0=–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ ... 6=–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
    texts = {
        0: "üåô –í—Å–µ–º –¥–æ–±—Ä—ã–π –≤–µ—á–µ—Ä!\n\n"
           "–°–µ–≥–æ–¥–Ω—è —É –Ω–∞—Å —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ —Å –∫–∞–ª—å—è–Ω—â–∏–∫–æ–º ü™ï‚ú®. –ö—Ç–æ –æ–∫–∞–∂–µ—Ç—Å—è –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º –≤ UFC –∏–ª–∏ MK11, "
           "—Ç–æ—Ç –ø–æ–ª—É—á–∏—Ç —Å–∫–∏–¥–∫—É 50% –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –∫–∞–ª—å—è–Ω! üéâ\n\n"
           "–ü—Ä–∏–≥–ª–∞—à–∞–µ–º –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Å—Ç–∏ —ç—Ç–æ—Ç –≤–µ—á–µ—Ä –≤ —É—é—Ç–Ω–æ–π –∞—Ç–º–æ—Å—Ñ–µ—Ä–µ –∏ —Å –æ—Ç–ª–∏—á–Ω—ã–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ–º –∏ –≤–∫—É—Å–Ω—ã–º –∫–∞–ª—å—è–Ω–æ–ºüòä.",
        1: "–î–æ–±—Ä–æ–≥–æ –≤–µ—á–µ—Ä–∞!\n\n"
           "üéµ –ü—Ä–∏–≥–ª–∞—à–∞–µ–º –≤–∞—Å –ø—Ä–æ–≤–µ—Å—Ç–∏ –ø—Ä–∏—è—Ç–Ω—ã–π –≤–µ—á–µ—Ä –≤ —É—é—Ç–Ω–æ–π –∞—Ç–º–æ—Å—Ñ–µ—Ä–µ –ø–æ–¥ —Å–ø–æ–∫–æ–π–Ω—É—é –º—É–∑—ã–∫—É. üçÉ "
           "–î–ª—è –≤–∞—à–µ–≥–æ —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏—è –º—ã –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–º —Å–∞–º—ã–π –≤–∫—É—Å–Ω—ã–π –∫–∞–ª—å—è–Ω.\n\nüôÇ –ñ–¥–µ–º –≤–∞—Å!",
        2: "–í—Å–µ–º –¥–æ–±—Ä—ã–π –≤–µ—á–µ—Ä! üåô\n\n"
           "–ü—Ä–∏–≥–ª–∞—à–∞–µ–º –≤–∞—Å –Ω–∞—Å–ª–∞–¥–∏—Ç—å—Å—è –∫–∏—Ç–∞–π—Å–∫–∏–º–∏ —á–∞—è–º–∏ –≤ –Ω–∞—à–µ–π —É—é—Ç–Ω–æ–π –∞—Ç–º–æ—Å—Ñ–µ—Ä–µ. üèÆ "
           "–í –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã —Ç–∞–∫–∏–µ —Å–æ—Ä—Ç–∞, –∫–∞–∫ –º–æ–ª–æ—á–Ω—ã–π —É–ª—É–Ω, –¥–∞ —Ö—É–Ω –ø–∞–æ, –ø—É—ç—Ä –∏ —Ç–µ –≥—É–∞–Ω—å –∏–Ω—å. üçµ\n\n"
           "üéâ –°–µ–≥–æ–¥–Ω—è –¥–µ–π—Å—Ç–≤—É–µ—Ç —Å–∫–∏–¥–∫–∞ 25% –Ω–∞ –≤–µ—Å—å —á–∞–π–Ω—ã–π –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç! üí∞\n\n"
           "–ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –ø—Ä–æ–≤–µ—Å—Ç–∏ –≤–µ—á–µ—Ä –≤ —Å–ø–æ–∫–æ–π–Ω–æ–π, —Ä–∞—Å—Å–ª–∞–±–ª—è—é—â–µ–π –æ–±—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —Ñ–∏–ª—å–º–∞ "
           "—Å —á–∞—à–µ—á–∫–æ–π –∞—Ä–æ–º–∞—Ç–Ω–æ–≥–æ —á–∞—èü´ñ –∏ –ø—Ä–∏—è—Ç–Ω—ã–º –∫–∞–ª—å—è–Ω–æ–º. ü™ï",
        3: "üåø –£–≤–∞–∂–∞–µ–º—ã–µ –≥–æ—Å—Ç–∏, –¥–æ–±—Ä—ã–π –≤–µ—á–µ—Ä! üåô\n\n"
           "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–≤–µ–∂–∏–µ –≤–∫—É—Å—ã –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –º–∏–∫—Å—ã, —á—Ç–æ–±—ã —Ä–∞—Å—à–∏—Ä–∏—Ç—å –≥—Ä–∞–Ω–∏—Ü—ã "
           "—Å–≤–æ–µ–≥–æ —Ç–∞–±–∞—á–Ω–æ–≥–æ –æ–ø—ã—Ç–∞. üßâ –ú—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –≤—ã –Ω–∞–π–¥–µ—Ç–µ —á—Ç–æ-—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ–µ —Å—Ä–µ–¥–∏ –Ω–∞—à–∏—Ö –Ω–æ–≤–∏–Ω–æ–∫. "
           "–î–æ –≤—Å—Ç—Ä–µ—á–∏! ‚ú®\n\n–ê —Ç–∞–∫ –∂–µ –∂–¥—ë–º –≤—Å–µ—Ö –Ω–∞ –∫–∏–Ω–æ –≤–µ—á–µ—Ä ‚ò∫Ô∏è",
        4: "üåô –í—Å–µ–º –¥–æ–±—Ä—ã–π –≤–µ—á–µ—Ä!\n\n"
           "üé∂ –ñ–¥–µ–º –≤–∞—Å, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Å—Ç–∏ —ç—Ç–æ—Ç –≤–µ—á–µ—Ä –ø–æ–¥ –ø—Ä–∏—è—Ç–Ω—É—é –º—É–∑—ã–∫—É –∏ –≤–∫—É—Å–Ω—ã–π –∫–∞–ª—å—è–Ω. ü™ï "
           "–ê –ø—Ä–∏ –∑–∞–∫–∞–∑–µ –∫–∞–ª—å—è–Ω–∞ ‚Äî —à–æ—Ç –≤ –ø–æ–¥–∞—Ä–æ–∫! üç∏\n\n‚ú® –í—Å–µ–º —Ö–æ—Ä–æ—à–∏—Ö –≤—ã—Ö–æ–¥–Ω—ã—Ö! ‚ú®",
        5: "–í—Å–µ–º –¥–æ–±—Ä—ã–π –≤–µ—á–µ—Ä! üåô\n\n"
           "–ñ–¥—ë–º –≤—Å–µ—Ö –≤ —ç—Ç–æ—Ç –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–π –≤—ã—Ö–æ–¥–Ω–æ–π, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Å—Ç–∏ –≤–µ—á–µ—Ä –≤ –ø—Ä–∏—è—Ç–Ω–æ–π –∞—Ç–º–æ—Å—Ñ–µ—Ä–µ –ø–æ–¥ —Ö–æ—Ä–æ—à—É—é –º—É–∑—ã–∫—É üé∂\n\n"
           "üî• –ê–∫—Ü–∏—è –¥–Ω—è:\n"
           "‚Äî –ö—Ç–æ –∑–∞–∫–∞–∂–µ—Ç —Å–µ–≥–æ–¥–Ω—è –∫–∞–ª—å—è–Ω ‚Äî —à–æ—Ç –≤ –ø–æ–¥–∞—Ä–æ–∫! üéÅ\n"
           "‚Äî –ê –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ –Ω–µ –ø—å—ë—Ç –∏–ª–∏ —Ö–æ—á–µ—Ç –æ—Ç–¥–æ—Ö–Ω—É—Ç—å –æ—Ç –∞–ª–∫–æ–≥–æ–ª—è ‚Äî —á–∞–π –≤ –ø–æ–¥–∞—Ä–æ–∫ üçµ\n\n–î–æ –≤—Å—Ç—Ä–µ—á–∏! üëã",
        6: "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä ! üåû\n"
           "–°–µ–≥–æ–¥–Ω—è –º—ã —Ä–∞–¥—ã –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤–∞–º —Å–∫–∏–¥–∫—É 35% –Ω–∞ —á–∞–π –¢–µ –ì—É–∞–Ω—å –ò–Ω—å. –≠—Ç–æ—Ç —Å–æ—Ä—Ç —á–∞—è "
           "–ø—Ä–µ–∫—Ä–∞—Å–Ω–æ –ø–æ–º–æ–≥–∞–µ—Ç —Ä–∞—Å—Å–ª–∞–±–∏—Ç—å—Å—è –∏ –Ω–∞—Å–ª–∞–¥–∏—Ç—å—Å—è –º–æ–º–µ–Ω—Ç–æ–º —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏—è. üçµüßò‚Äç‚ôÇÔ∏è\n"
           "–ü—Ä–∏–≥–ª–∞—à–∞–µ–º –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Å—Ç–∏ –≤–µ—á–µ—Ä –≤ —É—é—Ç–Ω–æ–π –∞—Ç–º–æ—Å—Ñ–µ—Ä–µ, –Ω–∞—Å–ª–∞–∂–¥–∞—è—Å—å –≤–∫—É—Å–æ–º —á–∞—è –∏ –∫–∞–ª—å—è–Ω–∞. ü™î"
    }
    text = texts.get(weekday)
    try:
        await bot.send_message(chat_id=TARGET_CHAT_ID, text=text)
        logger.info("–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ %s", TARGET_CHAT_ID)
    except TelegramError as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏: %s", e)

def job_listener(event):
    job_id = event.job_id
    if event.code == EVENT_JOB_ADDED:
        logger.info("–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: %s", job_id)
    elif event.code == EVENT_JOB_EXECUTED:
        logger.info("–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: %s", job_id)
    elif event.code == EVENT_JOB_ERROR:
        logger.error(
            "–ó–∞–¥–∞—á–∞ %s –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π: %s",
            job_id,
            getattr(event, 'exception', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
        )

@app.on_event("startup")
async def on_startup():
    # –í—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞ —Å–µ—Ä–≤–∏—Å–∞
    startup_time = datetime.now(ZoneInfo("Europe/Moscow")).strftime("%Y-%m-%d %H:%M:%S %Z")
    logger.info("–°–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω –≤ %s", startup_time)

    # –ó–∞–ø—É—Å–∫–∞–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
    asyncio.create_task(mention_listener())
    logger.info("mention_listener –∑–∞–ø—É—â–µ–Ω")

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å —Å–æ–±—ã—Ç–∏–π APScheduler
    scheduler.add_listener(
        job_listener,
        EVENT_JOB_ADDED | EVENT_JOB_EXECUTED | EVENT_JOB_ERROR
    )

    # –ü–ª–∞–Ω–∏—Ä—É–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É –≤ 18:00 –ú–°–ö
    job = scheduler.add_job(
        send_daily_message,
        trigger="cron",
        hour=18,
        minute=0,
        id="daily_18_00"
    )
    logger.info(
        "–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ (job_id=%s) ‚Äî –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 18:00 –ú–°–ö", 
        job.id
    )

    scheduler.start()
    logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")

@app.get("/")
async def health_check():
    return {
        "status": "running",
        "chat_id": TARGET_CHAT_ID,
        "time": datetime.now(ZoneInfo("Europe/Moscow")).strftime("%Y-%m-%d %H:%M:%S %Z")
    }
