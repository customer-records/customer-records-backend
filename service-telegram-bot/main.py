import os
import json
from dotenv import load_dotenv
from telegram import Bot
from fastapi import FastAPI, HTTPException, Request
from fastapi.responses import JSONResponse
import uvicorn
from multiprocessing import Process, Manager
from typing import Dict
from fastapi.middleware.cors import CORSMiddleware
from datetime import datetime

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

app = FastAPI()
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_methods=["*"],
    allow_headers=["*"],
)

BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN_INFO")
bot = Bot(token=BOT_TOKEN)

# –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –¥–ª—è —Ä–∞–∑–¥–µ–ª—è–µ–º–æ–π –ø–∞–º—è—Ç–∏
manager = Manager()
users_db = manager.dict()  # –¢–µ–ø–µ—Ä—å —Å–ª–æ–≤–∞—Ä—å –¥–æ—Å—Ç—É–ø–µ–Ω –º–µ–∂–¥—É –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏

def run_bot():
    """–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ"""
    from telegram.ext import Updater, CommandHandler
    
    updater = Updater(BOT_TOKEN, use_context=True)
    
    def start(update, context):
        user = update.effective_user
        users_db[update.message.chat_id] = {
            'username': user.username or "Unknown",
            'chat_id': update.message.chat_id
        }
        update.message.reply_text(
            "ü§ñ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!\n"
            "–Ø –±—É–¥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å—è—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤.\n"
            f"–í–∞—à chat_id: {update.message.chat_id}"
        )
        print(f"New subscriber: {update.message.chat_id}")  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    
    updater.dispatcher.add_handler(CommandHandler("start", start))
    print("Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    updater.start_polling()
    updater.idle()

@app.post("/send-appointment")
async def send_notification(request: Request):
    try:
        body = await request.body()
        try:
            data = json.loads(body.decode('utf-8'))
        except json.JSONDecodeError:
            raise HTTPException(status_code=400, detail="Invalid JSON format")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–æ–ª–µ–π
        required_fields = {
            'client_name', 
            'phone', 
            'appointment_date',
            'appointment_time',
            'service_name',
            'specialist_name'
        }
        
        if not required_fields.issubset(data.keys()):
            missing = required_fields - set(data.keys())
            raise HTTPException(
                status_code=400,
                detail=f"Missing required fields: {', '.join(missing)}"
            )
        
        if not users_db:
            print("No subscribers in users_db:", dict(users_db))
            return JSONResponse(
                content={"status": "No active subscribers"},
                status_code=200
            )
        
        success_count = 0
        for chat_id, user_data in users_db.items():
            try:
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
                appointment_datetime = f"{data['appointment_date']} {data['appointment_time']}"
                try:
                    dt = datetime.strptime(appointment_datetime, "%Y-%m-%d %H:%M")
                    formatted_datetime = dt.strftime("%d.%m.%Y –≤ %H:%M")
                except ValueError:
                    formatted_datetime = appointment_datetime
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                message = (
                    "üìÖ *–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –≤ –∫–ª–∏–Ω–∏–∫–µ*\n\n"
                    f"üë§ *–ö–ª–∏–µ–Ω—Ç:* {data['client_name']}\n"
                    f"üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* {data['phone']}\n"
                    f"‚è∞ *–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:* {formatted_datetime}\n"
                    f"üè• *–£—Å–ª—É–≥–∞:* {data['service_name']}\n"
                    f"üë®‚Äç‚öïÔ∏è *–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç:* {data['specialist_name']}\n\n"
                    "_–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏_"
                )
                
                bot.send_message(
                    chat_id=chat_id,
                    text=message,
                    parse_mode="Markdown"
                )
                success_count += 1
                print(f"Sent to {chat_id} ({user_data['username']})")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è chat_id {chat_id}: {str(e)}")
        
        return JSONResponse(
            content={
                "status": "success",
                "notifications_sent": success_count,
                "total_subscribers": len(users_db)
            },
            status_code=200
        )
    
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"Internal server error: {str(e)}"
        )

if __name__ == '__main__':
    bot_process = Process(target=run_bot)
    bot_process.start()
    
    try:
        uvicorn.run(
            app,
            host="0.0.0.0",
            port=5000,
            log_level="info",
            access_log=True
        )
    except KeyboardInterrupt:
        print("\n–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...")
        bot_process.terminate()
        bot_process.join()